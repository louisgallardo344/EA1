Jacobi
function[x,k]=Jacobi2(A,b,epsilon)

if (abs(A(1,1))>=abs(A(1,2))+abs(A(1,3))) && (abs(A(2,2))>=abs(A(2,1))+abs(A(2,3))) && (abs(A(3,3))>=abs(A(3,1))+abs(A(3,2)))

%Matrix for values
x=[x1];
y=[x2];
z=[x3];

x1
x2
x3

%1st iteration
x1=(1/A(1,1))*(b(1)-A(1,2)*0-A(1,3)*0);
x2=(1/A(2,2))*(b(2)-A(2,1)*0-A(2,3)*0);
x3=(1/A(3,3))*(b(3)-A(3,1)*0-A(3,2)*0);

k=1;
c=2;
x1=inf;
x2=inf;
x3=inf;


while k<8
    X1=(1/A(1,1))*(b(1)-(A(1,2)*x2)-(A(1,3)*x3));
    X2=(1/A(2,2))*(b(2)-A(2,1)*x1-A(2,3)*x3);
    X3=(1/A(3,3))*(b(3)-A(3,1)*x1-A(3,2)*x2);
    x(1,c)=X1;
    y(1,c)=X2;
    z(1,c)=X3;
    x1e=abs(X1-x1);
    x2e=abs(X2-x2);
    x3e=abs(X3-x3);
    x1=X1;
    x2=X2;
    x3=X3;
    k=k+1;
    c=c+1;
end

K=[1:1:8];
x
y
z
k
plot(K,x,K,y,K,z)
grid on

else
    print('The matrix should be diagonally dominant.')
end

end


Gauss Seidel

function [x,k] = GausSeidel(A,b,epsilon)
 
        x1n = (1/A(1,1))*((b(1,1)-(A(1,2)*x2))-(A(1,3)*x3));
        x2n = (1/A(2,2))*((b(2,1)-(A(2,1)*x1n))-(A(2,3)*x3));
        x3n = (1/A(3,3))*((b(3,1)-(A(3,1)*x1n))-(A(3,2)*x2n));
        
    err1 = abs(x1n-x1);
    err2 = abs(x2n-x2);
    err3 = abs(x3n-x3);
    
    x1=x1n;
    x2=x2n;
    x3=x3n;
    
    if err1<=epsilon && err2<=epsilon && err3<=epsilon
        loop = false;
    end
    
    k=1+k;
end
 
x=[x1,x2,x3];
 
return

